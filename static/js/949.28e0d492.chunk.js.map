{"version":3,"file":"static/js/949.28e0d492.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","Pages/ContactsPage/PhoneBookForm/initialState.js","Pages/ContactsPage/PhoneBookForm/fields.js","webpack://react-homework-template/./src/Pages/ContactsPage/PhoneBookForm/PhoneBookForm.module.scss?d62f","Pages/ContactsPage/PhoneBookForm/PhoneBookForm.jsx","webpack://react-homework-template/./src/Pages/ContactsPage/ContactsPage.module.scss?aad3","Pages/ContactsPage/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","redux/filter/filter-selectors.js","Pages/ContactsPage/PhoneBookFilter/fields.js","Pages/ContactsPage/PhoneBookFilter/PhoneBookFilter.jsx","Pages/ContactsPage/ContactsPage.jsx","shared/components/TextFieldMui/TextFieldMui.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const getAllContacts = ({ contacts }) => contacts.item;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","const initialState = {\n  id: '',\n  name: '',\n  number: '',\n};\n\nexport default initialState;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'Name',\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n  number: {\n    type: 'tel',\n    name: 'number',\n    required: true,\n    label: 'Phone',\n    placeholder: '+X(XXX)XXX-XX-XX',\n    pattern: '[+][1-9]{1}[(][0-9]{3}[)][0-9]{3}-[0-9]{2}-[0-9]{2}',\n    title:\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PhoneBookForm_form__nyC7F\"};","import BasicButtons from 'shared/components/BasicButtons/BasicButtons';\nimport TextFieldMui from 'shared/components/TextFieldMui/TextFieldMui';\n\nimport useForm from '../../../shared/hooks/useForm';\n\nimport initialState from './initialState';\nimport fields from './fields';\n\nimport styles from './PhoneBookForm.module.scss';\n\nconst PhoneBookForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({ initialState, onSubmit });\n  const { name, number } = state;\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <TextFieldMui value={name} handleChange={handleChange} {...fields.name} />\n      <TextFieldMui value={number} handleChange={handleChange} {...fields.number} />\n      <BasicButtons>Add contact</BasicButtons>\n    </form>\n  );\n};\n\nexport default PhoneBookForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__Dr-qg\",\"filter\":\"ContactsPage_filter__3H07B\",\"contactList\":\"ContactsPage_contactList__F9oie\",\"contactItem\":\"ContactsPage_contactItem__OgorT\",\"btnDelete\":\"ContactsPage_btnDelete__W1KN5\"};","import { nanoid } from 'nanoid';\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchDeleteContact } from '../../../redux/contacts/contacts-operation';\nimport { getFilteredContacts } from '../../../redux/contacts/contacts-selectors';\nimport { fetchAllContacts } from '../../../redux/contacts/contacts-operation';\n\nimport styles from '../ContactsPage.module.scss';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const elements = contacts.map(({ id, name, number }) => (\n    <li key={nanoid()} className={styles.contactItem}>\n      <div>{name}</div>\n      <div>{number}</div>\n      <div>\n        <button className={styles.btnDelete} onClick={() => handleDeleteContact(id)} type=\"button\">\n          Delete\n        </button>\n      </div>\n    </li>\n  ));\n\n  return <ul className={styles.contactList}>{elements}</ul>;\n};\n\nexport default ContactList;\n\nContactList.defaultProps = {\n  contacts: [],\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const getFilter = ({ filter }) => filter;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'filter',\n    label: 'Filter',\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n  },\n};\nexport default fields;\n","import { setFilter } from '../../../redux/filter/filter-slice';\nimport { getFilter } from '../../../redux/filter/filter-selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport TextFieldMui from 'shared/components/TextFieldMui/TextFieldMui';\n\nimport fields from './fields';\n\nimport styles from '../ContactsPage.module.scss';\n\nconst PhoneBookFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const filter = useSelector(getFilter);\n\n  return (\n    <div className={styles.filter}>\n      <TextFieldMui value={filter} handleChange={handleFilter} {...fields.name} />\n    </div>\n  );\n};\n\nexport default PhoneBookFilter;\n","import { useSelector } from 'react-redux';\n\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { fetchAddContact } from 'redux/contacts/contacts-operation';\n\nimport { useDispatch } from 'react-redux';\n\nimport PhoneBookForm from './PhoneBookForm/PhoneBookForm';\nimport ContactList from './ContactsList/ContactsList';\nimport PhoneBookFilter from './PhoneBookFilter/PhoneBookFilter';\n\nimport styles from './ContactsPage.module.scss';\n\nconst ContactsPage = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const isContacts = Boolean(filteredContacts.length);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = data => {\n    dispatch(fetchAddContact(data));\n  };\n  return (\n    <>\n      <div className={styles.container}>\n        <PhoneBookForm onSubmit={handleSubmit} />\n        <PhoneBookFilter />\n        <ContactList />\n        {!isContacts && <p>Contacts list is empty!</p>}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport default function TextFieldMui({ label, handleChange, ...props }) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        '& > :not(style)': { m: 1 },\n      }}\n    >\n      <TextField\n        id=\"demo-helper-text-aligned-no-helper\"\n        onChange={handleChange}\n        autoComplete=\"off\"\n        fullWidth\n        label={label}\n        {...props}\n      />\n    </Box>\n  );\n}\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"],"names":["getFilteredContacts","contacts","filter","items","normalizedFilter","toLowerCase","name","includes","id","number","type","required","label","pattern","title","placeholder","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","styles","TextFieldMui","value","fields","BasicButtons","ContactList","useSelector","dispatch","useDispatch","useEffect","fetchAllContacts","elements","map","onClick","fetchDeleteContact","handleDeleteContact","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","defaultProps","getFilter","target","setFilter","filteredContacts","isContacts","Boolean","length","data","fetchAddContact","props","sx","display","alignItems","m","onChange","autoComplete","fullWidth","useState","setState","useCallback","prevState","e","preventDefault"],"sourceRoot":""}